{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"depositCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getDepositRoot","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getLeafValue","inputs":[{"name":"leafType","type":"uint8","internalType":"uint8"},{"name":"originNetwork","type":"uint32","internalType":"uint32"},{"name":"originAddress","type":"address","internalType":"address"},{"name":"destinationNetwork","type":"uint32","internalType":"uint32"},{"name":"destinationAddress","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"metadataHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"verifyMerkleProof","inputs":[{"name":"leafHash","type":"bytes32","internalType":"bytes32"},{"name":"smtProof","type":"bytes32[32]","internalType":"bytes32[32]"},{"name":"index","type":"uint32","internalType":"uint32"},{"name":"root","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"pure"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"error","name":"MerkleTreeFull","inputs":[]}],"bytecode":{"object":"0x604060808152346100ad5760006033908082556001918291825b61002c575b845161038d90816100b38239f35b6020808410156100a757855190810182815281870192909252858152606081016001600160401b038111828210176100915786525190208083830155600019831461007b578380930192610019565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b5061001e565b600080fdfe6080604090808252600436101561001557600080fd5b600090813560e01c9081632dfdf0b5146102bc575080633ae050471461020c5780633e197043146101075763fb5708341461004f57600080fd5b34610100576104603660031901126101005761042436811161010357359063ffffffff8216809203610100576004355b6020808310156100f157906100c99160018086861c16146000146100cf576100a68461032f565b35918651918201928352868201528581526100c0816102fd565b519020916102d8565b9061007f565b6100d88461032f565b358651918201928352868201528581526100c0816102fd565b60208286519061044435148152f35b80fd5b5080fd5b50346101005760e03660031901126101005760043560ff811681036101035763ffffffff602435818116810361020857604435906001600160a01b0390818316830361020457606435938416840361020457608435918216820361020457865193602085019560ff60f81b9060f81b16865263ffffffff60e01b809260e01b1660218601526bffffffffffffffffffffffff19809460601b16602586015260e01b16603984015260601b16603d82015260a435605182015260c43560718201526071815260a081019281841067ffffffffffffffff8511176101f0575082602094525190208152f35b634e487b7160e01b81526041600452602490fd5b8580fd5b8380fd5b5090346101035781600319360112610103578160535492815b602091828410156102b2579061028a9160018088871c16146000146102905784603301549086519085820192835287820152868152610263816102fd565b519020925b85519081019180835286820152858152610281816102fd565b519020926102d8565b91610225565b855184810191825282878201528681526102a9816102fd565b51902092610268565b6020908551908152f35b9050346101035781600319360112610103576020906053548152f35b60001981146102e75760010190565b634e487b7160e01b600052601160045260246000fd5b6060810190811067ffffffffffffffff82111761031957604052565b634e487b7160e01b600052604160045260246000fd5b60208110156103415760051b60240190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a2e1f43924931e6ce94044e04c5705f35acef350f395f153ad7a0ef34208701c64736f6c63430008150033","sourceMap":"409:5058:55:-:0;;;;;;;1405:1;1417:7;409:5058;;;;;1460:13;;;;409:5058;;;1455:205;409:5058;;;;;;;;;1509:3;409:5058;1475:32;;;;;;409:5058;;1556:50;;;646:2;;;;;;;;;;1556:50;;;646:2;;;-1:-1:-1;;;;;646:2:55;;;;;;;;;;;1546:61;;409:5058;;;;;;;;;;;;;;;1460:13;;;409:5058;;;;1405:1;409:5058;;;;;1405:1;409:5058;646:2;409:5058;;;1405:1;646:2;;;;;1405:1;646:2;1475:32;;;;409:5058;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080604090808252600436101561001557600080fd5b600090813560e01c9081632dfdf0b5146102bc575080633ae050471461020c5780633e197043146101075763fb5708341461004f57600080fd5b34610100576104603660031901126101005761042436811161010357359063ffffffff8216809203610100576004355b6020808310156100f157906100c99160018086861c16146000146100cf576100a68461032f565b35918651918201928352868201528581526100c0816102fd565b519020916102d8565b9061007f565b6100d88461032f565b358651918201928352868201528581526100c0816102fd565b60208286519061044435148152f35b80fd5b5080fd5b50346101005760e03660031901126101005760043560ff811681036101035763ffffffff602435818116810361020857604435906001600160a01b0390818316830361020457606435938416840361020457608435918216820361020457865193602085019560ff60f81b9060f81b16865263ffffffff60e01b809260e01b1660218601526bffffffffffffffffffffffff19809460601b16602586015260e01b16603984015260601b16603d82015260a435605182015260c43560718201526071815260a081019281841067ffffffffffffffff8511176101f0575082602094525190208152f35b634e487b7160e01b81526041600452602490fd5b8580fd5b8380fd5b5090346101035781600319360112610103578160535492815b602091828410156102b2579061028a9160018088871c16146000146102905784603301549086519085820192835287820152868152610263816102fd565b519020925b85519081019180835286820152858152610281816102fd565b519020926102d8565b91610225565b855184810191825282878201528681526102a9816102fd565b51902092610268565b6020908551908152f35b9050346101035781600319360112610103576020906053548152f35b60001981146102e75760010190565b634e487b7160e01b600052601160045260246000fd5b6060810190811067ffffffffffffffff82111761031957604052565b634e487b7160e01b600052604160045260246000fd5b60208110156103415760051b60240190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a2e1f43924931e6ce94044e04c5705f35acef350f395f153ad7a0ef34208701c64736f6c63430008150033","sourceMap":"409:5058:55:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;646:2;409:5058;646:2;;;409:5058;;;;;;;;;;;;;-1:-1:-1;;409:5058:55;;;;;;;;;;;;;;;;;;;;;;4031:8;409:5058;3980:37;;;;;;409:5058;4031:8;409:5058;;;;;;4069:21;4068:28;4064:185;409:5058;;;4148:16;;;:::i;:::-;409:5058;;;;4131:40;;;409:5058;;;646:2;;;409:5058;4131:40;;;;;;:::i;:::-;646:2;4121:51;;4064:185;4031:8;:::i;:::-;3948:18;;;4064:185;4231:16;;;:::i;:::-;409:5058;;;4208:40;;;409:5058;;;646:2;;;409:5058;4208:40;;;;;;:::i;3980:37::-;409:5058;3980:37;;409:5058;;;;4277:12;409:5058;;;;;;;;;;;;;;;;;-1:-1:-1;;409:5058:55;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;409:5058:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;5168:276;409:5058;5168:276;;409:5058;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5168:276;;646:2;;;;;;;;;;;;;;;409:5058;646:2;;;5141:317;;409:5058;;;646:2;-1:-1:-1;;;646:2:55;;;409:5058;646:2;409:5058;;646:2;409:5058;;;;;;;;;;;;;;;;;;;;;;1806:25;1856:12;409:5058;1878:42;;2032:8;646:2;1981:37;;;;;;;2089:1;2032:8;2089:1;;409:5058;;;;2070:20;2069:27;2065:204;2089:1;;;646:2;2148:7;646:2;;409:5058;;;2131:39;;;;409:5058;;;646:2;;;409:5058;2131:39;;;;;;:::i;:::-;646:2;2121:50;;2065:204;;409:5058;;2335:62;;;409:5058;;;;646:2;;;409:5058;2335:62;;;;;;:::i;:::-;646:2;2308:103;;2032:8;;:::i;:::-;1949:18;;;2065:204;409:5058;;2223:45;;;409:5058;;;646:2;;;;409:5058;2223:45;;;;;;:::i;:::-;646:2;2213:56;;2065:204;;;1981:37;646:2;1981:37;;409:5058;;;;;;;;;;;;;;;;;;;;;1026:27;409:5058;;;;;-1:-1:-1;;409:5058:55;;;;;;;:::o;:::-;646:2;;;409:5058;;;;;;;;646:2;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;409:5058;;;;;;;;;;;;:::o;:::-;646:2;;;;;;;;409:5058;646:2;","linkReferences":{}},"methodIdentifiers":{"depositCount()":"2dfdf0b5","getDepositRoot()":"3ae05047","getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)":"3e197043","verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)":"fb570834"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"leafType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"name\":\"getLeafValue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[32]\",\"name\":\"smtProof\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"verifyMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"MerkleTreeFull()\":[{\"details\":\"Thrown when the merkle tree is full\"}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)\":{\"params\":{\"amount\":\"[0] Amount of tokens/ether, [1] Amount of ether\",\"destinationAddress\":\"Destination address\",\"destinationNetwork\":\"Destination network\",\"leafType\":\"Leaf type -->  [0] transfer Ether / ERC20 tokens, [1] message\",\"metadataHash\":\"Hash of the metadata\",\"originAddress\":\"[0] Origin token address, 0 address is reserved for ether, [1] msg.sender of the message\",\"originNetwork\":\"Origin Network\"}},\"verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)\":{\"params\":{\"index\":\"Index of the leaf\",\"leafHash\":\"Leaf hash\",\"root\":\"Merkle root\",\"smtProof\":\"Smt proof\"}}},\"stateVariables\":{\"_gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDepositRoot()\":{\"notice\":\"Computes and returns the merkle root\"},\"getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)\":{\"notice\":\"Given the leaf data returns the leaf value\"},\"verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)\":{\"notice\":\"Verify merkle proof\"}},\"notice\":\"This contract will be used as a helper for all the sparse merkle tree related functions Based on the implementation of the deposit eth2.0 contract https://github.com/ethereum/consensus-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/DepositContract.sol\":\"DepositContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618\",\"dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://622c3eb87563e71585c9f538d1a196fe2d154dcc5b8f335e8770a8acc95e1f3a\",\"dweb:/ipfs/QmSnDqJJLzv3mirjGB1vrk5X7hegFdS7BKpscpxyqj7sWu\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"src/lib/DepositContract.sol\":{\"keccak256\":\"0x9552c3e2338347a449047ff0f0e3f0a57b443220ad40ce320a27447ddfbc2f2b\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://239b8e3a3fe6ed1320e71fad6254703b8c20d4674b3ddd70b9f3e358e726e08f\",\"dweb:/ipfs/Qme7t7eF3bmd12zpfMVqgepCmZsD5gXB3Rhg1T9TUmjsT4\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"type":"error","name":"MerkleTreeFull"},{"inputs":[{"internalType":"uint8","name":"version","type":"uint8","indexed":false}],"type":"event","name":"Initialized","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"depositCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getDepositRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint8","name":"leafType","type":"uint8"},{"internalType":"uint32","name":"originNetwork","type":"uint32"},{"internalType":"address","name":"originAddress","type":"address"},{"internalType":"uint32","name":"destinationNetwork","type":"uint32"},{"internalType":"address","name":"destinationAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"metadataHash","type":"bytes32"}],"stateMutability":"pure","type":"function","name":"getLeafValue","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"leafHash","type":"bytes32"},{"internalType":"bytes32[32]","name":"smtProof","type":"bytes32[32]"},{"internalType":"uint32","name":"index","type":"uint32"},{"internalType":"bytes32","name":"root","type":"bytes32"}],"stateMutability":"pure","type":"function","name":"verifyMerkleProof","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)":{"params":{"amount":"[0] Amount of tokens/ether, [1] Amount of ether","destinationAddress":"Destination address","destinationNetwork":"Destination network","leafType":"Leaf type -->  [0] transfer Ether / ERC20 tokens, [1] message","metadataHash":"Hash of the metadata","originAddress":"[0] Origin token address, 0 address is reserved for ether, [1] msg.sender of the message","originNetwork":"Origin Network"}},"verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)":{"params":{"index":"Index of the leaf","leafHash":"Leaf hash","root":"Merkle root","smtProof":"Smt proof"}}},"version":1},"userdoc":{"kind":"user","methods":{"getDepositRoot()":{"notice":"Computes and returns the merkle root"},"getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)":{"notice":"Given the leaf data returns the leaf value"},"verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)":{"notice":"Verify merkle proof"}},"version":1}},"settings":{"remappings":["ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/lib/DepositContract.sol":"DepositContract"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"keccak256":"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271","urls":["bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618","dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol":{"keccak256":"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790","urls":["bzz-raw://622c3eb87563e71585c9f538d1a196fe2d154dcc5b8f335e8770a8acc95e1f3a","dweb:/ipfs/QmSnDqJJLzv3mirjGB1vrk5X7hegFdS7BKpscpxyqj7sWu"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"keccak256":"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183","urls":["bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06","dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"],"license":"MIT"},"src/lib/DepositContract.sol":{"keccak256":"0x9552c3e2338347a449047ff0f0e3f0a57b443220ad40ce320a27447ddfbc2f2b","urls":["bzz-raw://239b8e3a3fe6ed1320e71fad6254703b8c20d4674b3ddd70b9f3e358e726e08f","dweb:/ipfs/Qme7t7eF3bmd12zpfMVqgepCmZsD5gXB3Rhg1T9TUmjsT4"],"license":"AGPL-3.0"}},"version":1},"id":55}